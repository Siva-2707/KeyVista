provider "aws" {
  region = "us-east-1"  # Update as needed
}

# -------------------------------
# 1. VPC + Networking
# -------------------------------

resource "aws_vpc" "main_vpc" {
  cidr_block = "10.0.0.0/16"
  enable_dns_support = true
  enable_dns_hostnames = true
  tags = {
    Name = "main-vpc"
  }
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main_vpc.id
}

resource "aws_subnet" "public_subnet_1" {
  vpc_id            = aws_vpc.main_vpc.id
  cidr_block        = "10.0.1.0/24"
  map_public_ip_on_launch = true
  availability_zone = "us-east-1a"
  tags = { Name = "Public Subnet" }
}

resource "aws_subnet" "public_subnet_2" {
  vpc_id            = aws_vpc.main_vpc.id
  cidr_block        = "10.0.4.0/24"
  map_public_ip_on_launch = true
  availability_zone = "us-east-1b"
  tags = { Name = "Public Subnet" }
}


resource "aws_subnet" "private_subnet_1" {
  vpc_id     = aws_vpc.main_vpc.id
  cidr_block = "10.0.2.0/24"
  availability_zone = "us-east-1a"
  tags = { Name = "Private Backend Subnet" }
}

resource "aws_subnet" "private_subnet_2" {
  vpc_id     = aws_vpc.main_vpc.id
  cidr_block = "10.0.5.0/24"
  availability_zone = "us-east-1b"
  tags = { Name = "Private Backend Subnet" }
}

resource "aws_subnet" "private_rds_subnet_1" {
  vpc_id     = aws_vpc.main_vpc.id
  cidr_block = "10.0.3.0/24"
  availability_zone = "us-east-1a"
  tags = { Name = "Private RDS Subnet" }
}

resource "aws_subnet" "private_rds_subnet_2" {
  vpc_id     = aws_vpc.main_vpc.id
  cidr_block = "10.0.6.0/24"
  availability_zone = "us-east-1b"
  tags = { Name = "Private RDS Subnet" }
}

# NAT Gateway
resource "aws_eip" "nat_eip" {
  domain = "vpc"
}

resource "aws_nat_gateway" "nat_gw" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public_subnet_1.id
}

# Route Tables
resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.main_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }
}

resource "aws_route_table_association" "public_assoc_1" {
  subnet_id      = aws_subnet.public_subnet_1.id
  route_table_id = aws_route_table.public_rt.id
}

resource "aws_route_table_association" "public_assoc_2" {
  subnet_id      = aws_subnet.public_subnet_2.id
  route_table_id = aws_route_table.public_rt.id
}

resource "aws_route_table" "private_rt" {
  vpc_id = aws_vpc.main_vpc.id
  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat_gw.id
  }
}

resource "aws_route_table_association" "backend_assoc_1" {
  subnet_id      = aws_subnet.private_subnet_1.id
  route_table_id = aws_route_table.private_rt.id
}

resource "aws_route_table_association" "backend_assoc_2" {
  subnet_id      = aws_subnet.private_subnet_2.id
  route_table_id = aws_route_table.private_rt.id
}

resource "aws_route_table_association" "rds_assoc_1" {
  subnet_id      = aws_subnet.private_rds_subnet_1.id
  route_table_id = aws_route_table.private_rt.id
}

resource "aws_route_table_association" "rds_assoc_2" {
  subnet_id      = aws_subnet.private_rds_subnet_2.id
  route_table_id = aws_route_table.private_rt.id
}


data "aws_ami" "amazon_linux" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-gp2"]
  }
}

# -------------------------------
# 2. Frontend EC2 -> AMI -> ASG -> ALB
# -------------------------------

resource "aws_security_group" "frontend_instance_sg" {
  name        = "frontend-instance-sg"
  description = "Security group for frontend EC2 instances"
  vpc_id      = aws_vpc.main_vpc.id

  ingress {
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_sg_frontend.id]  # Allow ALB traffic
  }

  ingress {
    from_port = 22
    to_port   = 22
    protocol = "tcp"
    cidr_blocks = ["0.0.0/0"]  # Allow SSH access from anywhere (not recommended for production)
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "Frontend ASG Instance SG"
  }
}


resource "aws_instance" "frontend_build" {
  ami                    = data.aws_ami.amazon_linux.id # Ubuntu sample
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.public_subnet_1.id
  vpc_security_group_ids = [aws_security_group.frontend_instance_sg.id]
  associate_public_ip_address = true
  user_data              = file("scripts/setup_frontend.sh") # Clone GitHub repo, install
  tags = { Name = "frontend-build" }
}

resource "aws_ami_from_instance" "frontend_ami" {
  name               = "frontend-ami"
  source_instance_id = aws_instance.frontend_build.id
  depends_on         = [aws_instance.frontend_build]
}

resource "null_resource" "destroy_frontend_build" {
  triggers = {
    ami_id = aws_ami_from_instance.frontend_ami.id
  }

  provisioner "local-exec" {
    command = "aws ec2 terminate-instances --instance-ids ${aws_instance.frontend_build.id}"
  }
}

# Launch Template + ASG
resource "aws_launch_template" "frontend_lt" {
  name_prefix   = "frontend-lt"
  image_id      = aws_ami_from_instance.frontend_ami.id
  instance_type = "t2.micro"

  vpc_security_group_ids = [aws_security_group.frontend_instance_sg.id]

  user_data = base64encode(<<-EOF
    #!/bin/bash
    service docker start
    sleep 10
    sudo docker run -d -p 80:80 --name keyvista-frontend keyvista-frontend
  EOF
  )
}

resource "aws_autoscaling_group" "frontend_asg" {
  desired_capacity     = 2
  max_size             = 10
  min_size             = 2
  vpc_zone_identifier  = [aws_subnet.public_subnet_1.id, aws_subnet.public_subnet_2.id]
  launch_template {
    id      = aws_launch_template.frontend_lt.id
    version = "$Latest"
  }
}

resource "aws_security_group" "alb_sg_frontend" {
  name        = "frontend_asg"
  description = "Security group for ALB"
  vpc_id      = aws_vpc.main_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# ALB
resource "aws_lb" "frontend_alb" {
  name               = "frontend-alb"
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.public_subnet_1.id, aws_subnet.public_subnet_2.id]
  security_groups    = [aws_security_group.alb_sg_frontend.id]
}

# -------------------------------
# 3. Backend EC2 -> AMI -> ASG -> ALB
# -------------------------------


resource "aws_security_group" "backend_instance_sg" {
  name        = "backend-instance-sg"
  description = "Security group for backend EC2 instances"
  vpc_id      = aws_vpc.main_vpc.id

  ingress {
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_sg_backend.id]  # Allow ALB traffic
  }

  ingress {
    from_port = 22
    to_port   = 22
    protocol = "tcp"
    cidr_blocks = ["0.0.0/0"]  # Allow SSH access from anywhere (not recommended for production)
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "Backend ASG Instance SG"
  }
}


resource "aws_instance" "backend_build" {
  ami                    = data.aws_ami.amazon_linux.id # Ubuntu sample
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.private_subnet_1.id
  vpc_security_group_ids = [aws_security_group.frontend_instance_sg.id]
  associate_public_ip_address = true
  user_data              = file("scripts/setup_backend.sh") # Clone GitHub repo, install
  tags = { Name = "backend-build" }
}

resource "aws_ami_from_instance" "backend_ami" {
  name               = "backend-ami"
  source_instance_id = aws_instance.backend_build.id
  depends_on         = [aws_instance.backend_build]
}

resource "null_resource" "destroy_backend_build" {
  triggers = {
    ami_id = aws_ami_from_instance.backend_ami.id
  }

  provisioner "local-exec" {
    command = "aws ec2 terminate-instances --instance-ids ${aws_instance.backend_build.id}"
  }
}

# Launch Template + ASG
resource "aws_launch_template" "backend_lt" {
  name_prefix   = "backend-lt"
  image_id      = aws_ami_from_instance.backend_ami.id
  instance_type = "t2.micro"

  vpc_security_group_ids = [aws_security_group.backend_instance_sg.id]

  user_data = base64encode(<<-EOF
    #!/bin/bash
    service docker start
    sleep 10
    sudo docker run -d -p 8080:8080 --name keyvista-backend keyvista-backend
  EOF
  )

}

resource "aws_autoscaling_group" "backend_asg" {
  desired_capacity     = 2
  max_size             = 10
  min_size             = 2
  vpc_zone_identifier  = [aws_subnet.public_subnet_1.id, aws_subnet.public_subnet_2.id]
  launch_template {
    id      = aws_launch_template.backend_lt.id
    version = "$Latest"
  }
}

resource "aws_security_group" "alb_sg_backend" {
  name        = "backend_asg"
  description = "Security group for ALB"
  vpc_id      = aws_vpc.main_vpc.id

  ingress {
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_sg_frontend.id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# ALB
resource "aws_lb" "backend_alb" {
  name               = "backend-alb"
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.public_subnet_1.id, aws_subnet.public_subnet_2.id]
  security_groups    = [aws_security_group.alb_sg_backend.id]  # add SG
}


# -------------------------------
# 4. RDS Multi-AZ
# -------------------------------

resource "aws_db_subnet_group" "rds_subnet_group" {
  name       = "rds-subnet-group"
  subnet_ids = [aws_subnet.private_rds_subnet_1.id, aws_subnet.private_rds_subnet_2.id]
}

resource "aws_db_instance" "main_db" {
  identifier              = "keyvista-db"
  engine                  = "mysql"
  instance_class          = "db.t3.micro"
  multi_az                = true
  allocated_storage       = 20
  username                = jsondecode(aws_secretsmanager_secret_version.app_secrets_initial.secret_string)["db_username"]
  password                = jsondecode(aws_secretsmanager_secret_version.app_secrets_initial.secret_string)["db_password"]
  db_subnet_group_name    = aws_db_subnet_group.rds_subnet_group.name
  vpc_security_group_ids  = []
  skip_final_snapshot     = true
}

# -------------------------------
# 5. SNS Topic
# -------------------------------

resource "aws_sns_topic" "notification_topic" {
  name = "app-alerts"
}


# -------------------------------
# 6. CloudWatch Monitoring
# -------------------------------

resource "aws_cloudwatch_dashboard" "main_dashboard" {
  dashboard_name = "keyvista-dashboard"
  dashboard_body = jsonencode({
    widgets = [
      {
        type = "metric",
        x    = 0,
        y    = 0,
        width = 24,
        height = 6,
        properties = {
          metrics = [["AWS/EC2", "CPUUtilization", "InstanceId", "${aws_instance.frontend_build.id}"]],
          period = 300,
          stat   = "Average",
          region = "us-east-1",
          title  = "Frontend CPU Usage"
        }
      }
    ]
  })
}

resource "aws_cloudwatch_metric_alarm" "high_cpu_alarm" {
  alarm_name          = "high-cpu-frontend"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 1
  metric_name         = "CPUUtilization"
  namespace           = "AWS/EC2"
  period              = 120
  statistic           = "Average"
  threshold           = 70
  alarm_description   = "This metric monitors high CPU usage"
  dimensions = {
    InstanceId = aws_instance.frontend_build.id
  }
  alarm_actions = [aws_sns_topic.notification_topic.arn]
}

# resource "aws_cloudtrail" "trail" {
#   name                          = "keyvista-trail"
#   s3_bucket_name                = "your-bucket-name"
#   include_global_service_events = true
#   is_multi_region_trail         = true
#   enable_logging                = true
# }


# -------------------------------
# 7. Secrets Manager
# -------------------------------

resource "aws_secretsmanager_secret" "app_secrets" {
  name = "keyvista/secrets"
}

# 1. Initial secret version (without db_url)
resource "aws_secretsmanager_secret_version" "app_secrets_initial" {
  secret_id     = aws_secretsmanager_secret.app_secrets.id
  secret_string = jsonencode({
    "frontend_alb_endpoint" = aws_lb.frontend_alb.dns_name,
    "backend_alb_endpoint"  = aws_lb.backend_alb.dns_name,
    "db_username"           = "root",
    "db_password"           = "root",
    "sns_topic_arn"         = aws_sns_topic.notification_topic.arn
  })
}

# 2. Update secret version after DB creation (adds db_url)
resource "aws_secretsmanager_secret_version" "app_secrets_with_db_url" {
  secret_id     = aws_secretsmanager_secret.app_secrets.id
  secret_string = jsonencode({
    "frontend_alb_endpoint" = aws_lb.frontend_alb.dns_name,
    "backend_alb_endpoint"  = aws_lb.backend_alb.dns_name,
    "db_url"                = aws_db_instance.main_db.address,
    "db_username"           = "root",
    "db_password"           = "password@123",
    "sns_topic_arn"         = aws_sns_topic.notification_topic.arn
  })
  depends_on = [aws_db_instance.main_db]
}